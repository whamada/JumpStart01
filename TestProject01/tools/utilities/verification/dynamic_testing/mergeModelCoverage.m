function varargout = mergeModelCoverage(modelName, varargin)
%mergeModelCoverage Merge coverage results of model
%   Merge coverage results from verifying the model against the high-level
%   software requirements and low-level tests generated by Design Verifier.
%
%   mergeModelCoverage(ModelName)
%   mergeModelCoverage(ModelName, 'CI')

%   Copyright 2021 The MathWorks, Inc.

if ~dig.isProductInstalled('Simulink Coverage')
    error('A Simulink Coverage license is not available.');
end
if ~dig.isProductInstalled('Simulink Test')
    error('A Simulink Test license is not available.');
end

% Close all models.
bdclose('all');

% Clear all coverage data.
cvexit();

% Capture useful folder/file paths and names.
covDir = prjDirStruct.getDirPath('model coverage', modelName);
reqRslt = fullfile(prjDirStruct.getDirPath('HLR sim results', modelName), [prjNameConv.getNameStr('HLR sim results', modelName), '.mldatx']);
sldvRslt = fullfile(prjDirStruct.getDirPath('LLR sim results', modelName), [prjNameConv.getNameStr('LLR sim results', modelName), '.mldatx']);

% Delete the old results and reports if they exist.
matFile = fullfile(covDir, [prjNameConv.getNameStr('model coverage', modelName), '.mat']);
if exist(matFile, 'file')
    delete(matFile);
end
htmlFile = fullfile(covDir, [prjNameConv.getNameStr('model coverage report', modelName), '.html']);
if exist(htmlFile, 'file')
    delete(htmlFile);
end
gifDir = fullfile(covDir, 'scv_images');
if exist(gifDir, 'dir')
    rmdir(gifDir, 's');
end

% Check for prerequisites.
if ~exist(reqRslt, 'file')
    warning(['Test results ''', prjNameConv.getNameStr('HLR sim results', modelName), '.mldatx'' not found.']);
end
if ~exist(sldvRslt, 'file')
    warning(['Test results ''', prjNameConv.getNameStr('LLR sim results', modelName), '.mldatx'' not found.']);
end

% Load test results into Test Manager.
sltest.testmanager.clear();
sltest.testmanager.clearResults();
if exist(reqRslt, 'file')
    sltest.testmanager.importResults(reqRslt);
end
if exist(sldvRslt, 'file')
    sltest.testmanager.importResults(sldvRslt);
end
results = sltest.testmanager.getResultSets();

% Parse coverage results.
covIdx = 0;
for i = 1:length(results)
    if ~isempty(results(i).CoverageResults)
        covIdx = covIdx + 1;
        covResults(covIdx) = cv.cvdatagroup(results(i).CoverageResults);
    end
end
if covIdx > 0
    cov = covResults(1);
    for i = 2:covIdx
        cov = cov + covResults(i);
    end
    cumulativeExecutionCov = executioninfo(cov, modelName);
    cumulativeDecisionCov = decisioninfo(cov, modelName);
    cumulativeConditionCov = conditioninfo(cov, modelName);
    cumulativeMCDCCov = mcdcinfo(cov, modelName);
    if ~isempty(cumulativeExecutionCov)
        ExecutionOutcome = cumulativeExecutionCov(1)/cumulativeExecutionCov(2);
    else
        ExecutionOutcome = 1;
    end
    if ~isempty(cumulativeDecisionCov)
        DecisionOutcome = cumulativeDecisionCov(1)/cumulativeDecisionCov(2);
    else
        DecisionOutcome = 1;
    end
    if ~isempty(cumulativeConditionCov)
        ConditionOutcome = cumulativeConditionCov(1)/cumulativeConditionCov(2);
    else
        ConditionOutcome = 1;
    end
    if ~isempty(cumulativeMCDCCov)
        MCDCOutcome = cumulativeMCDCCov(1)/cumulativeMCDCCov(2);
    else
        MCDCOutcome = 1;
    end
    save(matFile, 'ExecutionOutcome', 'DecisionOutcome', 'ConditionOutcome', 'MCDCOutcome');
else
    cov = [];
    cumulativeExecutionCov = [];
    cumulativeDecisionCov = [];
    cumulativeConditionCov = [];
    cumulativeMCDCCov = [];
    ExecutionOutcome = 0;
    DecisionOutcome = 0;
    ConditionOutcome = 0;
    MCDCOutcome = 0;
end

if nargin > 1 && ~isempty(varargin{1})
    cvhtmlOption = ', ''-sRT=0''';
    result.Method = 'mergeModelCoverage';
    result.Component = modelName;
    result.CumulativeExecutionCov = cumulativeExecutionCov;
    result.CumulativeDecisionCov = cumulativeDecisionCov;
    result.CumulativeConditionCov = cumulativeConditionCov;
    result.CumulativeMCDCCov = cumulativeMCDCCov;
    if min([ExecutionOutcome, DecisionOutcome, ConditionOutcome, MCDCOutcome]) < 1
        result.Outcome = 0;
    else
        result.Outcome = 1;
    end
    result.Results = cov;
    varargout{1} = result;
else
    cvhtmlOption = ', ''-sRT=1''';
end

% Generate the coverage report.
if covIdx > 0
    cvStr = 'cvhtml(htmlFile';
    for i = 1:covIdx
        cvStr = [cvStr, ', covResults(', num2str(i), ')'];
    end
    cvStr = [cvStr, cvhtmlOption, ');'];
    eval(cvStr);
    %     cvhtml(htmlFile, covResults(:));
else
    warning('No coverage result.');
end

disp(['Model coverage report for ', modelName, ' is successfully generated.']);

end
